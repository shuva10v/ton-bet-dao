#pragma version >=0.2.0;
#include "stdlib.fc";
#include "utils.fc";

;;; based on https://github.com/ton-blockchain/token-contract/blob/main/nft/nft-item-editable-DRAFT.fc


int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

int op::transfer() asm "0x5fcc3d14 PUSHINT";
int op::get_static_data() asm "0x2fcb26a2 PUSHINT";
int op::edit_content() asm "0x1a0b9d51 PUSHINT";
int op::ownership_assigned() asm "0x05138d91 PUSHINT";
int op::excesses() asm "0xd53276db PUSHINT";
int op::report_static_data() asm "0x8b771735 PUSHINT";


const int METADATA_KEY_URI = 51065135818459385347574250312853146822620586594996463797054414300406918686668;
const int METADATA_KEY_NAME = 59089242681608890680090686026688704441792375738894456860693970539822503415433;
const int METADATA_KEY_LEVEL = 228748789187412400415878024685729699334331275676571924130290804107165375190;
const int METADATA_KEY_LINK_LEVEL0 = 52980425894522696122450762830976993059324876111996366402384618068875577391515;
const int METADATA_KEY_LINK_LEVEL1 = 95186537016895908399999252342660077910834077423773537655532550116721965180327;

;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  cell name
;;  cell uri
;;

(int, int, slice, slice, int, cell, cell, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
        return (-1, index, collection_address, ds~load_msg_addr(), ds~load_uint(8), ds~load_ref(),
                ds~load_ref(), ds~load_ref());
    } else {
        return (0, index, collection_address, null(), -1, null(), null(), null()); ;; nft not initialized yet
    }
}

() store_data(int index, slice collection_address, slice owner_address, int level, cell name, cell uri, cell parents) impure {
    set_data(
            begin_cell()
                    .store_uint(index, 64)
                    .store_slice(collection_address)
                    .store_slice(owner_address)
                    .store_uint(level, 8)
                    .store_ref(name)
                    .store_ref(uri)
                    .store_ref(parents)
                    .end_cell()
    );
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(to_address)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op, 32)
            .store_uint(query_id, 64);

    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }

    send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(int my_balance, int index, slice collection_address, slice owner_address, int level, cell name,
        cell uri, cell parents, slice sender_address, int query_id, slice in_msg_body, int fwd_fees) impure inline {
    throw_unless(401, equal_slices(sender_address, owner_address));

    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
        rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
        rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response

    if (forward_amount) {
        send_msg(new_owner_address, forward_amount, op::ownership_assigned(), query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }
    if (need_response) {
        force_chain(response_destination);
        send_msg(response_destination, rest_amount, op::excesses(), query_id, null(), 1); ;; paying fees, revert on errors
    }

    store_data(index, collection_address, new_owner_address, level, name, uri, parents);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
;;     throw(1000);
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    (int init?, int index, slice collection_address, slice owner_address, int level, cell name, cell uri, cell parents) = load_data();
    if (~ init?) {
        throw_unless(405, equal_slices(collection_address, sender_address));
        slice owner = in_msg_body~load_msg_addr();
        level = in_msg_body~load_uint(8);
        slice refs = in_msg_body~load_ref().begin_parse();
        name = refs~load_ref();
        uri = refs~load_ref();
        parents = refs~load_ref();
        store_data(index, collection_address, owner, level, name, uri, parents);
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer()) {
        transfer_ownership(my_balance, index, collection_address, owner_address, level, name, uri, parents, sender_address,
                query_id, in_msg_body, fwd_fee);
        return ();
    }
    if (op == op::get_static_data()) {
        send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256)
                .store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
        return ();
    }
    if (op == op::edit_content()) {
        throw_unless(410, equal_slices(sender_address, owner_address));
        store_data(index, collection_address, owner_address, level, name, in_msg_body~load_ref(), parents);
        return ();
    }
    throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
    (int init?, int index, slice collection_address, slice owner_address, int level, cell name, cell uri, cell parents) = load_data();
    cell res = new_dict(); ;; semi-chain layout
    res~udict_set_ref(256, METADATA_KEY_URI, uri);
    res~udict_set_ref(256, METADATA_KEY_NAME, name);
    res~udict_set_ref(256, METADATA_KEY_LEVEL, begin_cell().store_uint(level, 8).end_cell());
    slice parents_slice = parents.begin_parse();
    if (parents_slice.slice_bits()) {
        res~udict_set_ref(256, METADATA_KEY_LINK_LEVEL0, begin_cell()
                .store_slice(parents_slice~load_msg_addr()).end_cell());
    }
    return (init?, index, collection_address, owner_address, begin_cell()
            .store_uint(0, 8) ;; on-chain layout
            .store_ref(res).end_cell()); ;; append dict
}